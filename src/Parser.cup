import java_cup.runtime.*;

parser code  {:
  public boolean syntaxErrors = false;
  public void syntax_error(Symbol current_token) {
    report_error(
    "Syntax error at line " + (current_token.left + 1) + ", column " + current_token.right + "\n", null);
    syntaxErrors = true;
  }
:};

// *************************************
// ===== TERMINALS & NON-TERMINALS =====
// *************************************

// Control flow
terminal IF, THEN, ELSE, ENDIF;
terminal LOOP, ENDLOOP;
terminal BREAK;
terminal RETURN;

// Entry point
terminal MAIN;

// Type definitions
terminal DEFINE_FUNCTION; // fdef
terminal DEFINE_TYPE;     // tdef
terminal ALIAS;

// Primitive types
terminal BOOLEAN;         // Boolean type
terminal INT, RAT, FLOAT; // Numeric types
terminal CHAR;            // Character type (single)
terminal DICT;            // Dictionary type
terminal SEQ;             // List type

// Input / output
terminal READ;
terminal PRINT;

// Separators
terminal LPAREN, RPAREN; // ()
terminal LBRACE, RBRACE; // {}
terminal LBRACK, RBRACK; // []
terminal LANGLE, RANGLE; // <>

terminal SEMICOLON;
terminal COLON;
terminal COMMA;
terminal DOT;

/* OPERATORS */

// Boolean operators
terminal NOT;      // !
terminal AND;      // &&
terminal OR;       // ||
terminal IMPLIES;  // =>

// Numeric operators
terminal PLUS, MINUS, MULT, DIV, POF; // +, -, *, /, ^
terminal EQEQ, LTEQ;                  // =, <= (comparison)

// Language constructs
terminal EQ;                          // := (assignment)
terminal IN;                          // 'in' - Dictionary and seq in
terminal CONCAT;                      // :: (concat for dictionaries)
terminal QUESTION;                    // ? (surrounds predicate for function calls)

// Literals
terminal java.lang.Number    INTEGER_LITERAL;
terminal java.lang.Number    FLOAT_LITERAL;
terminal java.lang.Boolean   BOOLEAN_LITERAL;
terminal java.lang.Character CHARACTER_LITERAL;
terminal java.lang.String    STRING_LITERAL;

terminal                     RATIONAL_LITERAL;
terminal                     NULL_LITERAL;

terminal java.lang.String    IDENTIFIER;


/* Non-terminals */

// Program Structure
nonterminal main_declaration;

// Lexical Structure.
nonterminal literal;

// Data types
nonterminal type, primitive_type, aggregrate_type;
nonterminal numeric_type, integral_type;
nonterminal dict_type, seq_type;

// Blocks and Statements
nonterminal block, block_statements_opt, block_statements, block_statement;
nonterminal statement, statement_without_trailing_substatement; //TODO
nonterminal empty_statement, print_statement;


// *************************************
// ========= PRODUCTION RULES ==========
// *************************************

start with main_declaration;

// Program structure
main_declaration ::= MAIN block SEMICOLON
    ;

// Lexical Structure.
literal ::= INTEGER_LITERAL
    | FLOAT_LITERAL
    | BOOLEAN_LITERAL
    | CHARACTER_LITERAL
    | STRING_LITERAL
    | RATIONAL_LITERAL
    | NULL_LITERAL
    ;

// Data types
type ::= primitive_type
    | aggregrate_type
    ;
primitive_type ::= numeric_type
    | BOOLEAN
    ;
numeric_type ::= integral_type
    | FLOAT
    ;
integral_type ::= INT
    | CHAR
    ; 
aggregrate_type ::= dict_type
    | seq_type
    ;
dict_type ::= DICT LANGLE type COMMA type RANGLE
    ;
seq_type ::= SEQ LANGLE type RANGLE
    ;


// Blocks and Statements
// General structures (i.e. building blocks for other nonterminals)
block ::= LBRACE block_statements_opt RBRACE
    ;
block_statements_opt ::= 
    | block_statements
    ;
block_statements ::= block_statement
    | block_statements block_statement
    ; 
block_statement ::= statement
    ; // TODO
statement ::= statement_without_trailing_substatement
    ; //TODO
statement_without_trailing_substatement ::= block
    | empty_statement
    | print_statement
    ;
empty_statement ::= SEMICOLON
    ;
print_statement ::= PRINT literal SEMICOLON
    ;














